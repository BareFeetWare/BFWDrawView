//
//  SampleStyleKit.swift
//  BFWDrawView
//
//  Created by Tom Brodhurst-Hill on 29/11/16.
//  Copyright Â© 2016 BareFeetWare. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class SampleStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let translucentBlack: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.500)
        static let buttonHighlightedColor: UIColor = SampleStyleKit.baseColor
        static let baseLightColor: UIColor = SampleStyleKit.baseColor.highlight(withLevel: 0.5)
        static let baseColor: UIColor = UIColor(red: 0.808, green: 0.638, blue: 0.425, alpha: 1.000)
        static let buttonColor: UIColor = SampleStyleKit.baseLightColor
        static let buttonShadow: NSShadow = NSShadow(color: SampleStyleKit.translucentBlack, offset: CGSize(width: 0, height: 2), blurRadius: 3)
        static let buttonShadowHighlighted: NSShadow = NSShadow(color: SampleStyleKit.translucentBlack, offset: CGSize(width: 0, height: 1), blurRadius: 2)
    }

    //// Colors

    public dynamic class var translucentBlack: UIColor { return Cache.translucentBlack }
    public dynamic class var buttonHighlightedColor: UIColor { return Cache.buttonHighlightedColor }
    public dynamic class var baseLightColor: UIColor { return Cache.baseLightColor }
    public dynamic class var baseColor: UIColor { return Cache.baseColor }
    public dynamic class var buttonColor: UIColor { return Cache.buttonColor }

    //// Shadows

    public dynamic class var buttonShadow: NSShadow { return Cache.buttonShadow }
    public dynamic class var buttonShadowHighlighted: NSShadow { return Cache.buttonShadowHighlighted }

    //// Drawing Methods

    public dynamic class func drawPacMan(frame: CGRect = CGRect(x: 27, y: 29, width: 74, height: 74), animation: CGFloat = 1) {
        //// General Declarations
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let pacManColor = UIColor(red: 1.000, green: 0.806, blue: 0.000, alpha: 1.000)

        //// Variable Declarations
        let topLip: CGFloat = animation < 0.5 ? 24 * 2 * animation + 0.00001 : 24 - (animation - 0.5) * 2 * 24 + 0.00001
        let bottomLip: CGFloat = -topLip

        //// Oval Drawing
        let ovalRect = CGRect(x: frame.minX + fastFloor(frame.width * 0.00000 + 0.5), y: frame.minY + fastFloor(frame.height * 0.00000 + 0.5), width: fastFloor(frame.width * 1.00000 + 0.5) - fastFloor(frame.width * 0.00000 + 0.5), height: fastFloor(frame.height * 1.00000 + 0.5) - fastFloor(frame.height * 0.00000 + 0.5))
        let ovalPath = UIBezierPath()
        ovalPath.addArc(withCenter: CGPoint(x: ovalRect.midX, y: ovalRect.midY), radius: ovalRect.width / 2, startAngle: -bottomLip * CGFloat.pi/180, endAngle: -topLip * CGFloat.pi/180, clockwise: true)
        ovalPath.addLine(to: CGPoint(x: ovalRect.midX, y: ovalRect.midY))
        ovalPath.close()

        pacManColor.setFill()
        ovalPath.fill()
    }

    public dynamic class func drawBathroom(frame: CGRect = CGRect(x: 28, y: 53, width: 62, height: 29)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Shadow Declarations
        let bottomThinShadow = NSShadow(color: SampleStyleKit.translucentBlack, offset: CGSize(width: 0, height: 1), blurRadius: 2)
        let bottomShadow = NSShadow(color: SampleStyleKit.translucentBlack, offset: CGSize(width: 0, height: 2), blurRadius: 3)
        let highlightShadow = NSShadow(color: SampleStyleKit.baseLightColor, offset: CGSize(width: 0, height: -2), blurRadius: 5)


        //// Subframes
        let bathroomGroup: CGRect = CGRect(x: frame.minX, y: frame.minY, width: frame.width, height: frame.height)


        //// Bathroom Group
        //// Bath Roof and Wall Group
        context.saveGState()
        context.setAlpha(0.12)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bath Wall Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.00000 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.24138 + 0.5), width: fastFloor(bathroomGroup.width * 0.01613 + 0.5) - fastFloor(bathroomGroup.width * 0.00000 + 0.5), height: fastFloor(bathroomGroup.height * 0.93103 + 0.5) - fastFloor(bathroomGroup.height * 0.24138 + 0.5)))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Rectangle 49 Drawing
        let rectangle49Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.19355 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.24138 + 0.5), width: fastFloor(bathroomGroup.width * 0.20968 + 0.5) - fastFloor(bathroomGroup.width * 0.19355 + 0.5), height: fastFloor(bathroomGroup.height * 0.93103 + 0.5) - fastFloor(bathroomGroup.height * 0.24138 + 0.5)))
        UIColor.white.setFill()
        rectangle49Path.fill()


        //// Rectangle 50 Drawing
        let rectangle50Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.38710 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.24138 + 0.5), width: fastFloor(bathroomGroup.width * 0.40323 + 0.5) - fastFloor(bathroomGroup.width * 0.38710 + 0.5), height: fastFloor(bathroomGroup.height * 0.93103 + 0.5) - fastFloor(bathroomGroup.height * 0.24138 + 0.5)))
        UIColor.white.setFill()
        rectangle50Path.fill()


        //// Rectangle 51 Drawing
        let rectangle51Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.58065 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.24138 + 0.5), width: fastFloor(bathroomGroup.width * 0.59677 + 0.5) - fastFloor(bathroomGroup.width * 0.58065 + 0.5), height: fastFloor(bathroomGroup.height * 0.93103 + 0.5) - fastFloor(bathroomGroup.height * 0.24138 + 0.5)))
        UIColor.white.setFill()
        rectangle51Path.fill()


        //// Rectangle 52 Drawing
        let rectangle52Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.77419 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.24138 + 0.5), width: fastFloor(bathroomGroup.width * 0.79032 + 0.5) - fastFloor(bathroomGroup.width * 0.77419 + 0.5), height: fastFloor(bathroomGroup.height * 0.93103 + 0.5) - fastFloor(bathroomGroup.height * 0.24138 + 0.5)))
        UIColor.white.setFill()
        rectangle52Path.fill()


        //// Rectangle 53 Drawing
        let rectangle53Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.96774 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.24138 + 0.5), width: fastFloor(bathroomGroup.width * 0.98387 + 0.5) - fastFloor(bathroomGroup.width * 0.96774 + 0.5), height: fastFloor(bathroomGroup.height * 0.93103 + 0.5) - fastFloor(bathroomGroup.height * 0.24138 + 0.5)))
        UIColor.white.setFill()
        rectangle53Path.fill()


        //// Rectangle 54 Drawing
        let rectangle54Path = UIBezierPath()
        rectangle54Path.move(to: CGPoint(x: bathroomGroup.minX + 0.19692 * bathroomGroup.width, y: bathroomGroup.minY + 0.68731 * bathroomGroup.height))
        rectangle54Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.20834 * bathroomGroup.width, y: bathroomGroup.minY + 0.66296 * bathroomGroup.height))
        rectangle54Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.01275 * bathroomGroup.width, y: bathroomGroup.minY + 0.24372 * bathroomGroup.height))
        rectangle54Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.00134 * bathroomGroup.width, y: bathroomGroup.minY + 0.26808 * bathroomGroup.height))
        rectangle54Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.19692 * bathroomGroup.width, y: bathroomGroup.minY + 0.68731 * bathroomGroup.height))
        rectangle54Path.close()
        UIColor.white.setFill()
        rectangle54Path.fill()


        //// Rectangle 55 Drawing
        let rectangle55Path = UIBezierPath()
        rectangle55Path.move(to: CGPoint(x: bathroomGroup.minX + 0.01275 * bathroomGroup.width, y: bathroomGroup.minY + 0.68731 * bathroomGroup.height))
        rectangle55Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.00134 * bathroomGroup.width, y: bathroomGroup.minY + 0.66296 * bathroomGroup.height))
        rectangle55Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.19692 * bathroomGroup.width, y: bathroomGroup.minY + 0.24372 * bathroomGroup.height))
        rectangle55Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.20834 * bathroomGroup.width, y: bathroomGroup.minY + 0.26808 * bathroomGroup.height))
        rectangle55Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.01275 * bathroomGroup.width, y: bathroomGroup.minY + 0.68731 * bathroomGroup.height))
        rectangle55Path.close()
        UIColor.white.setFill()
        rectangle55Path.fill()


        //// Rectangle 56 Drawing
        let rectangle56Path = UIBezierPath()
        rectangle56Path.move(to: CGPoint(x: bathroomGroup.minX + 0.39047 * bathroomGroup.width, y: bathroomGroup.minY + 0.68731 * bathroomGroup.height))
        rectangle56Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.40189 * bathroomGroup.width, y: bathroomGroup.minY + 0.66296 * bathroomGroup.height))
        rectangle56Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.20630 * bathroomGroup.width, y: bathroomGroup.minY + 0.24372 * bathroomGroup.height))
        rectangle56Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.19488 * bathroomGroup.width, y: bathroomGroup.minY + 0.26808 * bathroomGroup.height))
        rectangle56Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.39047 * bathroomGroup.width, y: bathroomGroup.minY + 0.68731 * bathroomGroup.height))
        rectangle56Path.close()
        UIColor.white.setFill()
        rectangle56Path.fill()


        //// Rectangle 57 Drawing
        let rectangle57Path = UIBezierPath()
        rectangle57Path.move(to: CGPoint(x: bathroomGroup.minX + 0.20630 * bathroomGroup.width, y: bathroomGroup.minY + 0.68731 * bathroomGroup.height))
        rectangle57Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.19488 * bathroomGroup.width, y: bathroomGroup.minY + 0.66296 * bathroomGroup.height))
        rectangle57Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.39047 * bathroomGroup.width, y: bathroomGroup.minY + 0.24372 * bathroomGroup.height))
        rectangle57Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.40189 * bathroomGroup.width, y: bathroomGroup.minY + 0.26808 * bathroomGroup.height))
        rectangle57Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.20630 * bathroomGroup.width, y: bathroomGroup.minY + 0.68731 * bathroomGroup.height))
        rectangle57Path.close()
        UIColor.white.setFill()
        rectangle57Path.fill()


        //// Rectangle 58 Drawing
        let rectangle58Path = UIBezierPath()
        rectangle58Path.move(to: CGPoint(x: bathroomGroup.minX + 0.58402 * bathroomGroup.width, y: bathroomGroup.minY + 0.68731 * bathroomGroup.height))
        rectangle58Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.59544 * bathroomGroup.width, y: bathroomGroup.minY + 0.66296 * bathroomGroup.height))
        rectangle58Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.39985 * bathroomGroup.width, y: bathroomGroup.minY + 0.24372 * bathroomGroup.height))
        rectangle58Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.38843 * bathroomGroup.width, y: bathroomGroup.minY + 0.26808 * bathroomGroup.height))
        rectangle58Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.58402 * bathroomGroup.width, y: bathroomGroup.minY + 0.68731 * bathroomGroup.height))
        rectangle58Path.close()
        UIColor.white.setFill()
        rectangle58Path.fill()


        //// Rectangle 59 Drawing
        let rectangle59Path = UIBezierPath()
        rectangle59Path.move(to: CGPoint(x: bathroomGroup.minX + 0.39985 * bathroomGroup.width, y: bathroomGroup.minY + 0.68731 * bathroomGroup.height))
        rectangle59Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.38843 * bathroomGroup.width, y: bathroomGroup.minY + 0.66296 * bathroomGroup.height))
        rectangle59Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.58402 * bathroomGroup.width, y: bathroomGroup.minY + 0.24372 * bathroomGroup.height))
        rectangle59Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.59544 * bathroomGroup.width, y: bathroomGroup.minY + 0.26808 * bathroomGroup.height))
        rectangle59Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.39985 * bathroomGroup.width, y: bathroomGroup.minY + 0.68731 * bathroomGroup.height))
        rectangle59Path.close()
        UIColor.white.setFill()
        rectangle59Path.fill()


        //// Rectangle 60 Drawing
        let rectangle60Path = UIBezierPath()
        rectangle60Path.move(to: CGPoint(x: bathroomGroup.minX + 0.77757 * bathroomGroup.width, y: bathroomGroup.minY + 0.68731 * bathroomGroup.height))
        rectangle60Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.78899 * bathroomGroup.width, y: bathroomGroup.minY + 0.66296 * bathroomGroup.height))
        rectangle60Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.59340 * bathroomGroup.width, y: bathroomGroup.minY + 0.24372 * bathroomGroup.height))
        rectangle60Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.58198 * bathroomGroup.width, y: bathroomGroup.minY + 0.26808 * bathroomGroup.height))
        rectangle60Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.77757 * bathroomGroup.width, y: bathroomGroup.minY + 0.68731 * bathroomGroup.height))
        rectangle60Path.close()
        UIColor.white.setFill()
        rectangle60Path.fill()


        //// Rectangle 61 Drawing
        let rectangle61Path = UIBezierPath()
        rectangle61Path.move(to: CGPoint(x: bathroomGroup.minX + 0.59340 * bathroomGroup.width, y: bathroomGroup.minY + 0.68731 * bathroomGroup.height))
        rectangle61Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.58198 * bathroomGroup.width, y: bathroomGroup.minY + 0.66296 * bathroomGroup.height))
        rectangle61Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.77757 * bathroomGroup.width, y: bathroomGroup.minY + 0.24372 * bathroomGroup.height))
        rectangle61Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.78899 * bathroomGroup.width, y: bathroomGroup.minY + 0.26808 * bathroomGroup.height))
        rectangle61Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.59340 * bathroomGroup.width, y: bathroomGroup.minY + 0.68731 * bathroomGroup.height))
        rectangle61Path.close()
        UIColor.white.setFill()
        rectangle61Path.fill()


        //// Rectangle 62 Drawing
        let rectangle62Path = UIBezierPath()
        rectangle62Path.move(to: CGPoint(x: bathroomGroup.minX + 0.97112 * bathroomGroup.width, y: bathroomGroup.minY + 0.68731 * bathroomGroup.height))
        rectangle62Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.98253 * bathroomGroup.width, y: bathroomGroup.minY + 0.66296 * bathroomGroup.height))
        rectangle62Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.78695 * bathroomGroup.width, y: bathroomGroup.minY + 0.24372 * bathroomGroup.height))
        rectangle62Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.77553 * bathroomGroup.width, y: bathroomGroup.minY + 0.26808 * bathroomGroup.height))
        rectangle62Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.97112 * bathroomGroup.width, y: bathroomGroup.minY + 0.68731 * bathroomGroup.height))
        rectangle62Path.close()
        UIColor.white.setFill()
        rectangle62Path.fill()


        //// Rectangle 63 Drawing
        let rectangle63Path = UIBezierPath()
        rectangle63Path.move(to: CGPoint(x: bathroomGroup.minX + 0.78695 * bathroomGroup.width, y: bathroomGroup.minY + 0.68731 * bathroomGroup.height))
        rectangle63Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.77553 * bathroomGroup.width, y: bathroomGroup.minY + 0.66296 * bathroomGroup.height))
        rectangle63Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.97112 * bathroomGroup.width, y: bathroomGroup.minY + 0.24372 * bathroomGroup.height))
        rectangle63Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.98253 * bathroomGroup.width, y: bathroomGroup.minY + 0.26808 * bathroomGroup.height))
        rectangle63Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.78695 * bathroomGroup.width, y: bathroomGroup.minY + 0.68731 * bathroomGroup.height))
        rectangle63Path.close()
        UIColor.white.setFill()
        rectangle63Path.fill()




        //// Bath Roof Group
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.03226 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.06897 + 0.5), width: fastFloor(bathroomGroup.width * 0.06452 + 0.5) - fastFloor(bathroomGroup.width * 0.03226 + 0.5), height: fastFloor(bathroomGroup.height * 0.13793 + 0.5) - fastFloor(bathroomGroup.height * 0.06897 + 0.5)))
        UIColor.white.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.09677 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.06897 + 0.5), width: fastFloor(bathroomGroup.width * 0.12903 + 0.5) - fastFloor(bathroomGroup.width * 0.09677 + 0.5), height: fastFloor(bathroomGroup.height * 0.13793 + 0.5) - fastFloor(bathroomGroup.height * 0.06897 + 0.5)))
        UIColor.white.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.16129 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.06897 + 0.5), width: fastFloor(bathroomGroup.width * 0.19355 + 0.5) - fastFloor(bathroomGroup.width * 0.16129 + 0.5), height: fastFloor(bathroomGroup.height * 0.13793 + 0.5) - fastFloor(bathroomGroup.height * 0.06897 + 0.5)))
        UIColor.white.setFill()
        rectangle4Path.fill()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.22581 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.06897 + 0.5), width: fastFloor(bathroomGroup.width * 0.25806 + 0.5) - fastFloor(bathroomGroup.width * 0.22581 + 0.5), height: fastFloor(bathroomGroup.height * 0.13793 + 0.5) - fastFloor(bathroomGroup.height * 0.06897 + 0.5)))
        UIColor.white.setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.29032 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.06897 + 0.5), width: fastFloor(bathroomGroup.width * 0.32258 + 0.5) - fastFloor(bathroomGroup.width * 0.29032 + 0.5), height: fastFloor(bathroomGroup.height * 0.13793 + 0.5) - fastFloor(bathroomGroup.height * 0.06897 + 0.5)))
        UIColor.white.setFill()
        rectangle6Path.fill()


        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.35484 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.06897 + 0.5), width: fastFloor(bathroomGroup.width * 0.38710 + 0.5) - fastFloor(bathroomGroup.width * 0.35484 + 0.5), height: fastFloor(bathroomGroup.height * 0.13793 + 0.5) - fastFloor(bathroomGroup.height * 0.06897 + 0.5)))
        UIColor.white.setFill()
        rectangle7Path.fill()


        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.41935 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.06897 + 0.5), width: fastFloor(bathroomGroup.width * 0.45161 + 0.5) - fastFloor(bathroomGroup.width * 0.41935 + 0.5), height: fastFloor(bathroomGroup.height * 0.13793 + 0.5) - fastFloor(bathroomGroup.height * 0.06897 + 0.5)))
        UIColor.white.setFill()
        rectangle8Path.fill()


        //// Rectangle 9 Drawing
        let rectangle9Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.48387 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.06897 + 0.5), width: fastFloor(bathroomGroup.width * 0.51613 + 0.5) - fastFloor(bathroomGroup.width * 0.48387 + 0.5), height: fastFloor(bathroomGroup.height * 0.13793 + 0.5) - fastFloor(bathroomGroup.height * 0.06897 + 0.5)))
        UIColor.white.setFill()
        rectangle9Path.fill()


        //// Rectangle 10 Drawing
        let rectangle10Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.54839 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.06897 + 0.5), width: fastFloor(bathroomGroup.width * 0.58065 + 0.5) - fastFloor(bathroomGroup.width * 0.54839 + 0.5), height: fastFloor(bathroomGroup.height * 0.13793 + 0.5) - fastFloor(bathroomGroup.height * 0.06897 + 0.5)))
        UIColor.white.setFill()
        rectangle10Path.fill()


        //// Rectangle 11 Drawing
        let rectangle11Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.61290 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.06897 + 0.5), width: fastFloor(bathroomGroup.width * 0.64516 + 0.5) - fastFloor(bathroomGroup.width * 0.61290 + 0.5), height: fastFloor(bathroomGroup.height * 0.13793 + 0.5) - fastFloor(bathroomGroup.height * 0.06897 + 0.5)))
        UIColor.white.setFill()
        rectangle11Path.fill()


        //// Rectangle 12 Drawing
        let rectangle12Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.67742 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.06897 + 0.5), width: fastFloor(bathroomGroup.width * 0.70968 + 0.5) - fastFloor(bathroomGroup.width * 0.67742 + 0.5), height: fastFloor(bathroomGroup.height * 0.13793 + 0.5) - fastFloor(bathroomGroup.height * 0.06897 + 0.5)))
        UIColor.white.setFill()
        rectangle12Path.fill()


        //// Rectangle 13 Drawing
        let rectangle13Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.74194 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.06897 + 0.5), width: fastFloor(bathroomGroup.width * 0.77419 + 0.5) - fastFloor(bathroomGroup.width * 0.74194 + 0.5), height: fastFloor(bathroomGroup.height * 0.13793 + 0.5) - fastFloor(bathroomGroup.height * 0.06897 + 0.5)))
        UIColor.white.setFill()
        rectangle13Path.fill()


        //// Rectangle 14 Drawing
        let rectangle14Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.80645 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.06897 + 0.5), width: fastFloor(bathroomGroup.width * 0.83871 + 0.5) - fastFloor(bathroomGroup.width * 0.80645 + 0.5), height: fastFloor(bathroomGroup.height * 0.13793 + 0.5) - fastFloor(bathroomGroup.height * 0.06897 + 0.5)))
        UIColor.white.setFill()
        rectangle14Path.fill()


        //// Rectangle 15 Drawing
        let rectangle15Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.87097 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.06897 + 0.5), width: fastFloor(bathroomGroup.width * 0.90323 + 0.5) - fastFloor(bathroomGroup.width * 0.87097 + 0.5), height: fastFloor(bathroomGroup.height * 0.13793 + 0.5) - fastFloor(bathroomGroup.height * 0.06897 + 0.5)))
        UIColor.white.setFill()
        rectangle15Path.fill()


        //// Rectangle 16 Drawing
        let rectangle16Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.93548 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.06897 + 0.5), width: fastFloor(bathroomGroup.width * 0.96774 + 0.5) - fastFloor(bathroomGroup.width * 0.93548 + 0.5), height: fastFloor(bathroomGroup.height * 0.13793 + 0.5) - fastFloor(bathroomGroup.height * 0.06897 + 0.5)))
        UIColor.white.setFill()
        rectangle16Path.fill()


        //// Rectangle 17 Drawing
        let rectangle17Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.06452 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.13793 + 0.5), width: fastFloor(bathroomGroup.width * 0.09677 + 0.5) - fastFloor(bathroomGroup.width * 0.06452 + 0.5), height: fastFloor(bathroomGroup.height * 0.20690 + 0.5) - fastFloor(bathroomGroup.height * 0.13793 + 0.5)))
        UIColor.white.setFill()
        rectangle17Path.fill()


        //// Rectangle 18 Drawing
        let rectangle18Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.12903 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.13793 + 0.5), width: fastFloor(bathroomGroup.width * 0.16129 + 0.5) - fastFloor(bathroomGroup.width * 0.12903 + 0.5), height: fastFloor(bathroomGroup.height * 0.20690 + 0.5) - fastFloor(bathroomGroup.height * 0.13793 + 0.5)))
        UIColor.white.setFill()
        rectangle18Path.fill()


        //// Rectangle 19 Drawing
        let rectangle19Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.19355 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.13793 + 0.5), width: fastFloor(bathroomGroup.width * 0.22581 + 0.5) - fastFloor(bathroomGroup.width * 0.19355 + 0.5), height: fastFloor(bathroomGroup.height * 0.20690 + 0.5) - fastFloor(bathroomGroup.height * 0.13793 + 0.5)))
        UIColor.white.setFill()
        rectangle19Path.fill()


        //// Rectangle 20 Drawing
        let rectangle20Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.25806 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.13793 + 0.5), width: fastFloor(bathroomGroup.width * 0.29032 + 0.5) - fastFloor(bathroomGroup.width * 0.25806 + 0.5), height: fastFloor(bathroomGroup.height * 0.20690 + 0.5) - fastFloor(bathroomGroup.height * 0.13793 + 0.5)))
        UIColor.white.setFill()
        rectangle20Path.fill()


        //// Rectangle 21 Drawing
        let rectangle21Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.32258 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.13793 + 0.5), width: fastFloor(bathroomGroup.width * 0.35484 + 0.5) - fastFloor(bathroomGroup.width * 0.32258 + 0.5), height: fastFloor(bathroomGroup.height * 0.20690 + 0.5) - fastFloor(bathroomGroup.height * 0.13793 + 0.5)))
        UIColor.white.setFill()
        rectangle21Path.fill()


        //// Rectangle 22 Drawing
        let rectangle22Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.38710 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.13793 + 0.5), width: fastFloor(bathroomGroup.width * 0.41935 + 0.5) - fastFloor(bathroomGroup.width * 0.38710 + 0.5), height: fastFloor(bathroomGroup.height * 0.20690 + 0.5) - fastFloor(bathroomGroup.height * 0.13793 + 0.5)))
        UIColor.white.setFill()
        rectangle22Path.fill()


        //// Rectangle 23 Drawing
        let rectangle23Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.45161 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.13793 + 0.5), width: fastFloor(bathroomGroup.width * 0.48387 + 0.5) - fastFloor(bathroomGroup.width * 0.45161 + 0.5), height: fastFloor(bathroomGroup.height * 0.20690 + 0.5) - fastFloor(bathroomGroup.height * 0.13793 + 0.5)))
        UIColor.white.setFill()
        rectangle23Path.fill()


        //// Rectangle 24 Drawing
        let rectangle24Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.51613 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.13793 + 0.5), width: fastFloor(bathroomGroup.width * 0.54839 + 0.5) - fastFloor(bathroomGroup.width * 0.51613 + 0.5), height: fastFloor(bathroomGroup.height * 0.20690 + 0.5) - fastFloor(bathroomGroup.height * 0.13793 + 0.5)))
        UIColor.white.setFill()
        rectangle24Path.fill()


        //// Rectangle 25 Drawing
        let rectangle25Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.58065 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.13793 + 0.5), width: fastFloor(bathroomGroup.width * 0.61290 + 0.5) - fastFloor(bathroomGroup.width * 0.58065 + 0.5), height: fastFloor(bathroomGroup.height * 0.20690 + 0.5) - fastFloor(bathroomGroup.height * 0.13793 + 0.5)))
        UIColor.white.setFill()
        rectangle25Path.fill()


        //// Rectangle 26 Drawing
        let rectangle26Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.64516 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.13793 + 0.5), width: fastFloor(bathroomGroup.width * 0.67742 + 0.5) - fastFloor(bathroomGroup.width * 0.64516 + 0.5), height: fastFloor(bathroomGroup.height * 0.20690 + 0.5) - fastFloor(bathroomGroup.height * 0.13793 + 0.5)))
        UIColor.white.setFill()
        rectangle26Path.fill()


        //// Rectangle 27 Drawing
        let rectangle27Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.70968 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.13793 + 0.5), width: fastFloor(bathroomGroup.width * 0.74194 + 0.5) - fastFloor(bathroomGroup.width * 0.70968 + 0.5), height: fastFloor(bathroomGroup.height * 0.20690 + 0.5) - fastFloor(bathroomGroup.height * 0.13793 + 0.5)))
        UIColor.white.setFill()
        rectangle27Path.fill()


        //// Rectangle 28 Drawing
        let rectangle28Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.77419 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.13793 + 0.5), width: fastFloor(bathroomGroup.width * 0.80645 + 0.5) - fastFloor(bathroomGroup.width * 0.77419 + 0.5), height: fastFloor(bathroomGroup.height * 0.20690 + 0.5) - fastFloor(bathroomGroup.height * 0.13793 + 0.5)))
        UIColor.white.setFill()
        rectangle28Path.fill()


        //// Rectangle 29 Drawing
        let rectangle29Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.83871 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.13793 + 0.5), width: fastFloor(bathroomGroup.width * 0.87097 + 0.5) - fastFloor(bathroomGroup.width * 0.83871 + 0.5), height: fastFloor(bathroomGroup.height * 0.20690 + 0.5) - fastFloor(bathroomGroup.height * 0.13793 + 0.5)))
        UIColor.white.setFill()
        rectangle29Path.fill()


        //// Rectangle 30 Drawing
        let rectangle30Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.90323 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.13793 + 0.5), width: fastFloor(bathroomGroup.width * 0.93548 + 0.5) - fastFloor(bathroomGroup.width * 0.90323 + 0.5), height: fastFloor(bathroomGroup.height * 0.20690 + 0.5) - fastFloor(bathroomGroup.height * 0.13793 + 0.5)))
        UIColor.white.setFill()
        rectangle30Path.fill()


        //// Rectangle 31 Drawing
        let rectangle31Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.96774 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.13793 + 0.5), width: fastFloor(bathroomGroup.width * 1.00000 + 0.5) - fastFloor(bathroomGroup.width * 0.96774 + 0.5), height: fastFloor(bathroomGroup.height * 0.20690 + 0.5) - fastFloor(bathroomGroup.height * 0.13793 + 0.5)))
        UIColor.white.setFill()
        rectangle31Path.fill()


        //// Rectangle 32 Drawing
        let rectangle32Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.06452 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.00000 + 0.5), width: fastFloor(bathroomGroup.width * 0.09677 + 0.5) - fastFloor(bathroomGroup.width * 0.06452 + 0.5), height: fastFloor(bathroomGroup.height * 0.06897 + 0.5) - fastFloor(bathroomGroup.height * 0.00000 + 0.5)))
        UIColor.white.setFill()
        rectangle32Path.fill()


        //// Rectangle 33 Drawing
        let rectangle33Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.12903 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.00000 + 0.5), width: fastFloor(bathroomGroup.width * 0.16129 + 0.5) - fastFloor(bathroomGroup.width * 0.12903 + 0.5), height: fastFloor(bathroomGroup.height * 0.06897 + 0.5) - fastFloor(bathroomGroup.height * 0.00000 + 0.5)))
        UIColor.white.setFill()
        rectangle33Path.fill()


        //// Rectangle 34 Drawing
        let rectangle34Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.19355 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.00000 + 0.5), width: fastFloor(bathroomGroup.width * 0.22581 + 0.5) - fastFloor(bathroomGroup.width * 0.19355 + 0.5), height: fastFloor(bathroomGroup.height * 0.06897 + 0.5) - fastFloor(bathroomGroup.height * 0.00000 + 0.5)))
        UIColor.white.setFill()
        rectangle34Path.fill()


        //// Rectangle 35 Drawing
        let rectangle35Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.25806 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.00000 + 0.5), width: fastFloor(bathroomGroup.width * 0.29032 + 0.5) - fastFloor(bathroomGroup.width * 0.25806 + 0.5), height: fastFloor(bathroomGroup.height * 0.06897 + 0.5) - fastFloor(bathroomGroup.height * 0.00000 + 0.5)))
        UIColor.white.setFill()
        rectangle35Path.fill()


        //// Rectangle 36 Drawing
        let rectangle36Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.32258 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.00000 + 0.5), width: fastFloor(bathroomGroup.width * 0.35484 + 0.5) - fastFloor(bathroomGroup.width * 0.32258 + 0.5), height: fastFloor(bathroomGroup.height * 0.06897 + 0.5) - fastFloor(bathroomGroup.height * 0.00000 + 0.5)))
        UIColor.white.setFill()
        rectangle36Path.fill()


        //// Rectangle 37 Drawing
        let rectangle37Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.38710 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.00000 + 0.5), width: fastFloor(bathroomGroup.width * 0.41935 + 0.5) - fastFloor(bathroomGroup.width * 0.38710 + 0.5), height: fastFloor(bathroomGroup.height * 0.06897 + 0.5) - fastFloor(bathroomGroup.height * 0.00000 + 0.5)))
        UIColor.white.setFill()
        rectangle37Path.fill()


        //// Rectangle 38 Drawing
        let rectangle38Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.45161 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.00000 + 0.5), width: fastFloor(bathroomGroup.width * 0.48387 + 0.5) - fastFloor(bathroomGroup.width * 0.45161 + 0.5), height: fastFloor(bathroomGroup.height * 0.06897 + 0.5) - fastFloor(bathroomGroup.height * 0.00000 + 0.5)))
        UIColor.white.setFill()
        rectangle38Path.fill()


        //// Rectangle 39 Drawing
        let rectangle39Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.51613 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.00000 + 0.5), width: fastFloor(bathroomGroup.width * 0.54839 + 0.5) - fastFloor(bathroomGroup.width * 0.51613 + 0.5), height: fastFloor(bathroomGroup.height * 0.06897 + 0.5) - fastFloor(bathroomGroup.height * 0.00000 + 0.5)))
        UIColor.white.setFill()
        rectangle39Path.fill()


        //// Rectangle 40 Drawing
        let rectangle40Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.58065 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.00000 + 0.5), width: fastFloor(bathroomGroup.width * 0.61290 + 0.5) - fastFloor(bathroomGroup.width * 0.58065 + 0.5), height: fastFloor(bathroomGroup.height * 0.06897 + 0.5) - fastFloor(bathroomGroup.height * 0.00000 + 0.5)))
        UIColor.white.setFill()
        rectangle40Path.fill()


        //// Rectangle 41 Drawing
        let rectangle41Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.64516 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.00000 + 0.5), width: fastFloor(bathroomGroup.width * 0.67742 + 0.5) - fastFloor(bathroomGroup.width * 0.64516 + 0.5), height: fastFloor(bathroomGroup.height * 0.06897 + 0.5) - fastFloor(bathroomGroup.height * 0.00000 + 0.5)))
        UIColor.white.setFill()
        rectangle41Path.fill()


        //// Rectangle 42 Drawing
        let rectangle42Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.70968 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.00000 + 0.5), width: fastFloor(bathroomGroup.width * 0.74194 + 0.5) - fastFloor(bathroomGroup.width * 0.70968 + 0.5), height: fastFloor(bathroomGroup.height * 0.06897 + 0.5) - fastFloor(bathroomGroup.height * 0.00000 + 0.5)))
        UIColor.white.setFill()
        rectangle42Path.fill()


        //// Rectangle 43 Drawing
        let rectangle43Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.77419 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.00000 + 0.5), width: fastFloor(bathroomGroup.width * 0.80645 + 0.5) - fastFloor(bathroomGroup.width * 0.77419 + 0.5), height: fastFloor(bathroomGroup.height * 0.06897 + 0.5) - fastFloor(bathroomGroup.height * 0.00000 + 0.5)))
        UIColor.white.setFill()
        rectangle43Path.fill()


        //// Rectangle 44 Drawing
        let rectangle44Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.83871 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.00000 + 0.5), width: fastFloor(bathroomGroup.width * 0.87097 + 0.5) - fastFloor(bathroomGroup.width * 0.83871 + 0.5), height: fastFloor(bathroomGroup.height * 0.06897 + 0.5) - fastFloor(bathroomGroup.height * 0.00000 + 0.5)))
        UIColor.white.setFill()
        rectangle44Path.fill()


        //// Rectangle 45 Drawing
        let rectangle45Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.90323 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.00000 + 0.5), width: fastFloor(bathroomGroup.width * 0.93548 + 0.5) - fastFloor(bathroomGroup.width * 0.90323 + 0.5), height: fastFloor(bathroomGroup.height * 0.06897 + 0.5) - fastFloor(bathroomGroup.height * 0.00000 + 0.5)))
        UIColor.white.setFill()
        rectangle45Path.fill()


        //// Rectangle 46 Drawing
        let rectangle46Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.96774 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.00000 + 0.5), width: fastFloor(bathroomGroup.width * 1.00000 + 0.5) - fastFloor(bathroomGroup.width * 0.96774 + 0.5), height: fastFloor(bathroomGroup.height * 0.06897 + 0.5) - fastFloor(bathroomGroup.height * 0.00000 + 0.5)))
        UIColor.white.setFill()
        rectangle46Path.fill()


        //// Rectangle 47 Drawing
        let rectangle47Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.00000 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.13793 + 0.5), width: fastFloor(bathroomGroup.width * 0.03226 + 0.5) - fastFloor(bathroomGroup.width * 0.00000 + 0.5), height: fastFloor(bathroomGroup.height * 0.20690 + 0.5) - fastFloor(bathroomGroup.height * 0.13793 + 0.5)))
        UIColor.white.setFill()
        rectangle47Path.fill()


        //// Rectangle 48 Drawing
        let rectangle48Path = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.00000 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.00000 + 0.5), width: fastFloor(bathroomGroup.width * 0.03226 + 0.5) - fastFloor(bathroomGroup.width * 0.00000 + 0.5), height: fastFloor(bathroomGroup.height * 0.06897 + 0.5) - fastFloor(bathroomGroup.height * 0.00000 + 0.5)))
        UIColor.white.setFill()
        rectangle48Path.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: bathroomGroup.minX + 0.98387 * bathroomGroup.width, y: bathroomGroup.minY + 0.03448 * bathroomGroup.height))
        bezierPath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.01613 * bathroomGroup.width, y: bathroomGroup.minY + 0.03448 * bathroomGroup.height))
        bezierPath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.01613 * bathroomGroup.width, y: bathroomGroup.minY + 0.20690 * bathroomGroup.height))
        bezierPath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.98387 * bathroomGroup.width, y: bathroomGroup.minY + 0.20690 * bathroomGroup.height))
        bezierPath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.98387 * bathroomGroup.width, y: bathroomGroup.minY + 0.03448 * bathroomGroup.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: bathroomGroup.minX + 1.00000 * bathroomGroup.width, y: bathroomGroup.minY + 0.03448 * bathroomGroup.height))
        bezierPath.addLine(to: CGPoint(x: bathroomGroup.minX + 1.00000 * bathroomGroup.width, y: bathroomGroup.minY + 0.20690 * bathroomGroup.height))
        bezierPath.addLine(to: CGPoint(x: bathroomGroup.minX + 1.00000 * bathroomGroup.width, y: bathroomGroup.minY + 0.24138 * bathroomGroup.height))
        bezierPath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.00000 * bathroomGroup.width, y: bathroomGroup.minY + 0.24138 * bathroomGroup.height))
        bezierPath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.00000 * bathroomGroup.width, y: bathroomGroup.minY + 0.20690 * bathroomGroup.height))
        bezierPath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.00000 * bathroomGroup.width, y: bathroomGroup.minY + 0.03448 * bathroomGroup.height))
        bezierPath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.00000 * bathroomGroup.width, y: bathroomGroup.minY + 0.00000 * bathroomGroup.height))
        bezierPath.addLine(to: CGPoint(x: bathroomGroup.minX + 1.00000 * bathroomGroup.width, y: bathroomGroup.minY + 0.00000 * bathroomGroup.height))
        bezierPath.addLine(to: CGPoint(x: bathroomGroup.minX + 1.00000 * bathroomGroup.width, y: bathroomGroup.minY + 0.03448 * bathroomGroup.height))
        bezierPath.close()
        UIColor.white.setFill()
        bezierPath.fill()




        context.endTransparencyLayer()
        context.restoreGState()


        //// Bath Group
        //// Bath Tub Drawing
        let bathTubPath = UIBezierPath()
        bathTubPath.move(to: CGPoint(x: bathroomGroup.minX + 0.11290 * bathroomGroup.width, y: bathroomGroup.minY + 0.82759 * bathroomGroup.height))
        bathTubPath.addCurve(to: CGPoint(x: bathroomGroup.minX + 0.16129 * bathroomGroup.width, y: bathroomGroup.minY + 0.93103 * bathroomGroup.height), controlPoint1: CGPoint(x: bathroomGroup.minX + 0.11290 * bathroomGroup.width, y: bathroomGroup.minY + 0.88472 * bathroomGroup.height), controlPoint2: CGPoint(x: bathroomGroup.minX + 0.13457 * bathroomGroup.width, y: bathroomGroup.minY + 0.93103 * bathroomGroup.height))
        bathTubPath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.51613 * bathroomGroup.width, y: bathroomGroup.minY + 0.93103 * bathroomGroup.height))
        bathTubPath.addCurve(to: CGPoint(x: bathroomGroup.minX + 0.56452 * bathroomGroup.width, y: bathroomGroup.minY + 0.82759 * bathroomGroup.height), controlPoint1: CGPoint(x: bathroomGroup.minX + 0.54285 * bathroomGroup.width, y: bathroomGroup.minY + 0.93103 * bathroomGroup.height), controlPoint2: CGPoint(x: bathroomGroup.minX + 0.56452 * bathroomGroup.width, y: bathroomGroup.minY + 0.88472 * bathroomGroup.height))
        bathTubPath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.59677 * bathroomGroup.width, y: bathroomGroup.minY + 0.55172 * bathroomGroup.height))
        bathTubPath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.08065 * bathroomGroup.width, y: bathroomGroup.minY + 0.55172 * bathroomGroup.height))
        bathTubPath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.11290 * bathroomGroup.width, y: bathroomGroup.minY + 0.82759 * bathroomGroup.height))
        bathTubPath.close()
        UIColor.white.setFill()
        bathTubPath.fill()

        ////// Bath Tub Inner Shadow
        context.saveGState()
        context.clip(to: bathTubPath.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((highlightShadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let bathTubOpaqueShadow = (highlightShadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: highlightShadow.shadowOffset, blur: highlightShadow.shadowBlurRadius, color: bathTubOpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        bathTubOpaqueShadow.setFill()
        bathTubPath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Bath Right Leg Drawing
        let bathRightLegPath = UIBezierPath()
        bathRightLegPath.move(to: CGPoint(x: bathroomGroup.minX + 0.48387 * bathroomGroup.width, y: bathroomGroup.minY + 0.89655 * bathroomGroup.height))
        bathRightLegPath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.51613 * bathroomGroup.width, y: bathroomGroup.minY + 0.89655 * bathroomGroup.height))
        bathRightLegPath.addCurve(to: CGPoint(x: bathroomGroup.minX + 0.54839 * bathroomGroup.width, y: bathroomGroup.minY + 1.00000 * bathroomGroup.height), controlPoint1: CGPoint(x: bathroomGroup.minX + 0.51613 * bathroomGroup.width, y: bathroomGroup.minY + 0.89655 * bathroomGroup.height), controlPoint2: CGPoint(x: bathroomGroup.minX + 0.51977 * bathroomGroup.width, y: bathroomGroup.minY + 0.94600 * bathroomGroup.height))
        bathRightLegPath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.51613 * bathroomGroup.width, y: bathroomGroup.minY + 1.00000 * bathroomGroup.height))
        bathRightLegPath.addCurve(to: CGPoint(x: bathroomGroup.minX + 0.48387 * bathroomGroup.width, y: bathroomGroup.minY + 0.89655 * bathroomGroup.height), controlPoint1: CGPoint(x: bathroomGroup.minX + 0.49588 * bathroomGroup.width, y: bathroomGroup.minY + 0.95385 * bathroomGroup.height), controlPoint2: CGPoint(x: bathroomGroup.minX + 0.48387 * bathroomGroup.width, y: bathroomGroup.minY + 0.89655 * bathroomGroup.height))
        bathRightLegPath.close()
        UIColor.white.setFill()
        bathRightLegPath.fill()


        //// Tap Drawing
        let tapPath = UIBezierPath()
        tapPath.move(to: CGPoint(x: bathroomGroup.minX + 0.12903 * bathroomGroup.width, y: bathroomGroup.minY + 0.55172 * bathroomGroup.height))
        tapPath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.12903 * bathroomGroup.width, y: bathroomGroup.minY + 0.37931 * bathroomGroup.height))
        tapPath.addCurve(to: CGPoint(x: bathroomGroup.minX + 0.16935 * bathroomGroup.width, y: bathroomGroup.minY + 0.27586 * bathroomGroup.height), controlPoint1: CGPoint(x: bathroomGroup.minX + 0.12903 * bathroomGroup.width, y: bathroomGroup.minY + 0.37931 * bathroomGroup.height), controlPoint2: CGPoint(x: bathroomGroup.minX + 0.13195 * bathroomGroup.width, y: bathroomGroup.minY + 0.27871 * bathroomGroup.height))
        tapPath.addCurve(to: CGPoint(x: bathroomGroup.minX + 0.20968 * bathroomGroup.width, y: bathroomGroup.minY + 0.37931 * bathroomGroup.height), controlPoint1: CGPoint(x: bathroomGroup.minX + 0.20676 * bathroomGroup.width, y: bathroomGroup.minY + 0.27301 * bathroomGroup.height), controlPoint2: CGPoint(x: bathroomGroup.minX + 0.20968 * bathroomGroup.width, y: bathroomGroup.minY + 0.37931 * bathroomGroup.height))
        tapPath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.19355 * bathroomGroup.width, y: bathroomGroup.minY + 0.37931 * bathroomGroup.height))
        tapPath.addCurve(to: CGPoint(x: bathroomGroup.minX + 0.16935 * bathroomGroup.width, y: bathroomGroup.minY + 0.31034 * bathroomGroup.height), controlPoint1: CGPoint(x: bathroomGroup.minX + 0.19355 * bathroomGroup.width, y: bathroomGroup.minY + 0.37931 * bathroomGroup.height), controlPoint2: CGPoint(x: bathroomGroup.minX + 0.19194 * bathroomGroup.width, y: bathroomGroup.minY + 0.30982 * bathroomGroup.height))
        tapPath.addCurve(to: CGPoint(x: bathroomGroup.minX + 0.14516 * bathroomGroup.width, y: bathroomGroup.minY + 0.37931 * bathroomGroup.height), controlPoint1: CGPoint(x: bathroomGroup.minX + 0.14677 * bathroomGroup.width, y: bathroomGroup.minY + 0.31087 * bathroomGroup.height), controlPoint2: CGPoint(x: bathroomGroup.minX + 0.14516 * bathroomGroup.width, y: bathroomGroup.minY + 0.37931 * bathroomGroup.height))
        tapPath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.14516 * bathroomGroup.width, y: bathroomGroup.minY + 0.55172 * bathroomGroup.height))
        tapPath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.12903 * bathroomGroup.width, y: bathroomGroup.minY + 0.55172 * bathroomGroup.height))
        tapPath.close()
        UIColor.white.setFill()
        tapPath.fill()


        //// Bath Left Leg Drawing
        let bathLeftLegPath = UIBezierPath()
        bathLeftLegPath.move(to: CGPoint(x: bathroomGroup.minX + 0.19355 * bathroomGroup.width, y: bathroomGroup.minY + 0.89655 * bathroomGroup.height))
        bathLeftLegPath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.16129 * bathroomGroup.width, y: bathroomGroup.minY + 0.89655 * bathroomGroup.height))
        bathLeftLegPath.addCurve(to: CGPoint(x: bathroomGroup.minX + 0.12903 * bathroomGroup.width, y: bathroomGroup.minY + 1.00000 * bathroomGroup.height), controlPoint1: CGPoint(x: bathroomGroup.minX + 0.16129 * bathroomGroup.width, y: bathroomGroup.minY + 0.89655 * bathroomGroup.height), controlPoint2: CGPoint(x: bathroomGroup.minX + 0.15765 * bathroomGroup.width, y: bathroomGroup.minY + 0.94600 * bathroomGroup.height))
        bathLeftLegPath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.16129 * bathroomGroup.width, y: bathroomGroup.minY + 1.00000 * bathroomGroup.height))
        bathLeftLegPath.addCurve(to: CGPoint(x: bathroomGroup.minX + 0.19355 * bathroomGroup.width, y: bathroomGroup.minY + 0.89655 * bathroomGroup.height), controlPoint1: CGPoint(x: bathroomGroup.minX + 0.18154 * bathroomGroup.width, y: bathroomGroup.minY + 0.95385 * bathroomGroup.height), controlPoint2: CGPoint(x: bathroomGroup.minX + 0.19355 * bathroomGroup.width, y: bathroomGroup.minY + 0.89655 * bathroomGroup.height))
        bathLeftLegPath.close()
        UIColor.white.setFill()
        bathLeftLegPath.fill()


        //// Bath Rim Drawing
        let bathRimPath = UIBezierPath()
        bathRimPath.move(to: CGPoint(x: bathroomGroup.minX + 0.53830 * bathroomGroup.width, y: bathroomGroup.minY + 0.62278 * bathroomGroup.height))
        bathRimPath.addCurve(to: CGPoint(x: bathroomGroup.minX + 0.53830 * bathroomGroup.width, y: bathroomGroup.minY + 0.51515 * bathroomGroup.height), controlPoint1: CGPoint(x: bathroomGroup.minX + 0.64852 * bathroomGroup.width, y: bathroomGroup.minY + 0.59306 * bathroomGroup.height), controlPoint2: CGPoint(x: bathroomGroup.minX + 0.64852 * bathroomGroup.width, y: bathroomGroup.minY + 0.54487 * bathroomGroup.height))
        bathRimPath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.13912 * bathroomGroup.width, y: bathroomGroup.minY + 0.51515 * bathroomGroup.height))
        bathRimPath.addCurve(to: CGPoint(x: bathroomGroup.minX + 0.13912 * bathroomGroup.width, y: bathroomGroup.minY + 0.62278 * bathroomGroup.height), controlPoint1: CGPoint(x: bathroomGroup.minX + 0.02889 * bathroomGroup.width, y: bathroomGroup.minY + 0.54487 * bathroomGroup.height), controlPoint2: CGPoint(x: bathroomGroup.minX + 0.02889 * bathroomGroup.width, y: bathroomGroup.minY + 0.59306 * bathroomGroup.height))
        bathRimPath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.53830 * bathroomGroup.width, y: bathroomGroup.minY + 0.62278 * bathroomGroup.height))
        bathRimPath.close()
        context.saveGState()
        context.setShadow(offset: bottomThinShadow.shadowOffset, blur: bottomThinShadow.shadowBlurRadius, color: (bottomThinShadow.shadowColor as! UIColor).cgColor)
        UIColor.white.setFill()
        bathRimPath.fill()
        context.restoreGState()



        //// Bath Inside Drawing
        let bathInsidePath = UIBezierPath()
        bathInsidePath.move(to: CGPoint(x: bathroomGroup.minX + 0.52689 * bathroomGroup.width, y: bathroomGroup.minY + 0.58830 * bathroomGroup.height))
        bathInsidePath.addCurve(to: CGPoint(x: bathroomGroup.minX + 0.52689 * bathroomGroup.width, y: bathroomGroup.minY + 0.54963 * bathroomGroup.height), controlPoint1: CGPoint(x: bathroomGroup.minX + 0.63082 * bathroomGroup.width, y: bathroomGroup.minY + 0.57762 * bathroomGroup.height), controlPoint2: CGPoint(x: bathroomGroup.minX + 0.63082 * bathroomGroup.width, y: bathroomGroup.minY + 0.56031 * bathroomGroup.height))
        bathInsidePath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.15053 * bathroomGroup.width, y: bathroomGroup.minY + 0.54963 * bathroomGroup.height))
        bathInsidePath.addCurve(to: CGPoint(x: bathroomGroup.minX + 0.15053 * bathroomGroup.width, y: bathroomGroup.minY + 0.58830 * bathroomGroup.height), controlPoint1: CGPoint(x: bathroomGroup.minX + 0.04660 * bathroomGroup.width, y: bathroomGroup.minY + 0.56031 * bathroomGroup.height), controlPoint2: CGPoint(x: bathroomGroup.minX + 0.04660 * bathroomGroup.width, y: bathroomGroup.minY + 0.57762 * bathroomGroup.height))
        bathInsidePath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.52689 * bathroomGroup.width, y: bathroomGroup.minY + 0.58830 * bathroomGroup.height))
        bathInsidePath.close()
        SampleStyleKit.baseLightColor.setFill()
        bathInsidePath.fill()




        //// Towel and Rail Group
        //// Towel Rail Drawing
        let towelRailPath = UIBezierPath()
        towelRailPath.move(to: CGPoint(x: bathroomGroup.minX + 0.66129 * bathroomGroup.width, y: bathroomGroup.minY + 0.34483 * bathroomGroup.height))
        towelRailPath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.96774 * bathroomGroup.width, y: bathroomGroup.minY + 0.34483 * bathroomGroup.height))
        towelRailPath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.96774 * bathroomGroup.width, y: bathroomGroup.minY + 0.31034 * bathroomGroup.height))
        towelRailPath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.66129 * bathroomGroup.width, y: bathroomGroup.minY + 0.31034 * bathroomGroup.height))
        towelRailPath.addLine(to: CGPoint(x: bathroomGroup.minX + 0.66129 * bathroomGroup.width, y: bathroomGroup.minY + 0.34483 * bathroomGroup.height))
        towelRailPath.close()
        context.saveGState()
        context.setShadow(offset: bottomShadow.shadowOffset, blur: bottomShadow.shadowBlurRadius, color: (bottomShadow.shadowColor as! UIColor).cgColor)
        UIColor.white.setFill()
        towelRailPath.fill()
        context.restoreGState()



        //// Towel Group
        context.saveGState()
        context.setShadow(offset: bottomShadow.shadowOffset, blur: bottomShadow.shadowBlurRadius, color: (bottomShadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Towel White Drawing
        let towelWhitePath = UIBezierPath(rect: CGRect(x: bathroomGroup.minX + fastFloor(bathroomGroup.width * 0.70968 + 0.5), y: bathroomGroup.minY + fastFloor(bathroomGroup.height * 0.27586 + 0.5), width: fastFloor(bathroomGroup.width * 0.91935 + 0.5) - fastFloor(bathroomGroup.width * 0.70968 + 0.5), height: fastFloor(bathroomGroup.height * 0.82759 + 0.5) - fastFloor(bathroomGroup.height * 0.27586 + 0.5)))
        UIColor.white.setFill()
        towelWhitePath.fill()


        //// Towel Stripe 1 Drawing
        let towelStripe1Path = UIBezierPath()
        towelStripe1Path.move(to: CGPoint(x: bathroomGroup.minX + 0.72581 * bathroomGroup.width, y: bathroomGroup.minY + 0.27586 * bathroomGroup.height))
        towelStripe1Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.72581 * bathroomGroup.width, y: bathroomGroup.minY + 0.82759 * bathroomGroup.height))
        towelStripe1Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.74194 * bathroomGroup.width, y: bathroomGroup.minY + 0.82759 * bathroomGroup.height))
        towelStripe1Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.74194 * bathroomGroup.width, y: bathroomGroup.minY + 0.27586 * bathroomGroup.height))
        towelStripe1Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.72581 * bathroomGroup.width, y: bathroomGroup.minY + 0.27586 * bathroomGroup.height))
        towelStripe1Path.close()
        SampleStyleKit.baseLightColor.setFill()
        towelStripe1Path.fill()


        //// Towel Stripe 2 Drawing
        let towelStripe2Path = UIBezierPath()
        towelStripe2Path.move(to: CGPoint(x: bathroomGroup.minX + 0.75806 * bathroomGroup.width, y: bathroomGroup.minY + 0.27586 * bathroomGroup.height))
        towelStripe2Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.75806 * bathroomGroup.width, y: bathroomGroup.minY + 0.82759 * bathroomGroup.height))
        towelStripe2Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.77419 * bathroomGroup.width, y: bathroomGroup.minY + 0.82759 * bathroomGroup.height))
        towelStripe2Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.77419 * bathroomGroup.width, y: bathroomGroup.minY + 0.27586 * bathroomGroup.height))
        towelStripe2Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.75806 * bathroomGroup.width, y: bathroomGroup.minY + 0.27586 * bathroomGroup.height))
        towelStripe2Path.close()
        SampleStyleKit.baseLightColor.setFill()
        towelStripe2Path.fill()


        //// Towel Stripe 3 Drawing
        let towelStripe3Path = UIBezierPath()
        towelStripe3Path.move(to: CGPoint(x: bathroomGroup.minX + 0.79032 * bathroomGroup.width, y: bathroomGroup.minY + 0.27586 * bathroomGroup.height))
        towelStripe3Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.79032 * bathroomGroup.width, y: bathroomGroup.minY + 0.82759 * bathroomGroup.height))
        towelStripe3Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.80645 * bathroomGroup.width, y: bathroomGroup.minY + 0.82759 * bathroomGroup.height))
        towelStripe3Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.80645 * bathroomGroup.width, y: bathroomGroup.minY + 0.27586 * bathroomGroup.height))
        towelStripe3Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.79032 * bathroomGroup.width, y: bathroomGroup.minY + 0.27586 * bathroomGroup.height))
        towelStripe3Path.close()
        SampleStyleKit.baseLightColor.setFill()
        towelStripe3Path.fill()


        //// Towel Stripe 4 Drawing
        let towelStripe4Path = UIBezierPath()
        towelStripe4Path.move(to: CGPoint(x: bathroomGroup.minX + 0.82258 * bathroomGroup.width, y: bathroomGroup.minY + 0.27586 * bathroomGroup.height))
        towelStripe4Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.82258 * bathroomGroup.width, y: bathroomGroup.minY + 0.82759 * bathroomGroup.height))
        towelStripe4Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.83871 * bathroomGroup.width, y: bathroomGroup.minY + 0.82759 * bathroomGroup.height))
        towelStripe4Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.83871 * bathroomGroup.width, y: bathroomGroup.minY + 0.27586 * bathroomGroup.height))
        towelStripe4Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.82258 * bathroomGroup.width, y: bathroomGroup.minY + 0.27586 * bathroomGroup.height))
        towelStripe4Path.close()
        SampleStyleKit.baseLightColor.setFill()
        towelStripe4Path.fill()


        //// Towel Stripe 5 Drawing
        let towelStripe5Path = UIBezierPath()
        towelStripe5Path.move(to: CGPoint(x: bathroomGroup.minX + 0.85484 * bathroomGroup.width, y: bathroomGroup.minY + 0.27586 * bathroomGroup.height))
        towelStripe5Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.85484 * bathroomGroup.width, y: bathroomGroup.minY + 0.82759 * bathroomGroup.height))
        towelStripe5Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.87097 * bathroomGroup.width, y: bathroomGroup.minY + 0.82759 * bathroomGroup.height))
        towelStripe5Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.87097 * bathroomGroup.width, y: bathroomGroup.minY + 0.27586 * bathroomGroup.height))
        towelStripe5Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.85484 * bathroomGroup.width, y: bathroomGroup.minY + 0.27586 * bathroomGroup.height))
        towelStripe5Path.close()
        SampleStyleKit.baseLightColor.setFill()
        towelStripe5Path.fill()


        //// Towel Stripe 6 Drawing
        let towelStripe6Path = UIBezierPath()
        towelStripe6Path.move(to: CGPoint(x: bathroomGroup.minX + 0.88710 * bathroomGroup.width, y: bathroomGroup.minY + 0.27586 * bathroomGroup.height))
        towelStripe6Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.88710 * bathroomGroup.width, y: bathroomGroup.minY + 0.82759 * bathroomGroup.height))
        towelStripe6Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.90323 * bathroomGroup.width, y: bathroomGroup.minY + 0.82759 * bathroomGroup.height))
        towelStripe6Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.90323 * bathroomGroup.width, y: bathroomGroup.minY + 0.27586 * bathroomGroup.height))
        towelStripe6Path.addLine(to: CGPoint(x: bathroomGroup.minX + 0.88710 * bathroomGroup.width, y: bathroomGroup.minY + 0.27586 * bathroomGroup.height))
        towelStripe6Path.close()
        SampleStyleKit.baseLightColor.setFill()
        towelStripe6Path.fill()


        context.endTransparencyLayer()
        context.restoreGState()
    }

    public dynamic class func drawFrontDoor() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let translucentBaseColor = SampleStyleKit.baseColor.highlight(withLevel: 0.5)
        let bevelShadowColor = translucentBaseColor.highlight(withLevel: 0.85)
        let baseLighterColor = SampleStyleKit.baseColor.highlight(withLevel: 0.8)
        let blackOpacity15 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.150)

        //// Shadow Declarations
        let bottomThinShadow = NSShadow(color: SampleStyleKit.translucentBlack, offset: CGSize(width: 0, height: 1), blurRadius: 2)
        let bottomShadow = NSShadow(color: SampleStyleKit.translucentBlack, offset: CGSize(width: 0, height: 2), blurRadius: 3)
        let whiteBottom = NSShadow(color: UIColor.white, offset: CGSize(width: 0, height: 2), blurRadius: 0)
        let bevelShadow2 = NSShadow(color: bevelShadowColor, offset: CGSize(width: 0, height: -2), blurRadius: 2)
        let darkInner = NSShadow(color: blackOpacity15, offset: CGSize(width: 0, height: 1), blurRadius: 1)

        //// Frames
        let frame = CGRect(x: 48, y: 40, width: 32, height: 48)

        //// Subframes
        let frontDoorGroup: CGRect = CGRect(x: frame.minX + 2, y: frame.minY + 2, width: frame.width - 4, height: frame.height - 4)


        //// Front Door Frame Group
        //// Front Door Group
        context.saveGState()
        context.setShadow(offset: bottomShadow.shadowOffset, blur: bottomShadow.shadowBlurRadius, color: (bottomShadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Door Step Drawing
        let doorStepPath = UIBezierPath(rect: CGRect(x: frontDoorGroup.minX + fastFloor(frontDoorGroup.width * 0.00000 + 0.5), y: frontDoorGroup.minY + fastFloor(frontDoorGroup.height * 0.95455 + 0.5), width: fastFloor(frontDoorGroup.width * 1.00000 + 0.5) - fastFloor(frontDoorGroup.width * 0.00000 + 0.5), height: fastFloor(frontDoorGroup.height * 1.00000 + 0.5) - fastFloor(frontDoorGroup.height * 0.95455 + 0.5)))
        baseLighterColor.setFill()
        doorStepPath.fill()


        //// Door Panel Drawing
        let doorPanelPath = UIBezierPath(rect: CGRect(x: frontDoorGroup.minX + fastFloor(frontDoorGroup.width * 0.07143 + 0.5), y: frontDoorGroup.minY + fastFloor(frontDoorGroup.height * 0.00000 + 0.5), width: fastFloor(frontDoorGroup.width * 0.92857 + 0.5) - fastFloor(frontDoorGroup.width * 0.07143 + 0.5), height: fastFloor(frontDoorGroup.height * 0.95455 + 0.5) - fastFloor(frontDoorGroup.height * 0.00000 + 0.5)))
        baseLighterColor.setFill()
        doorPanelPath.fill()

        ////// Door Panel Inner Shadow
        context.saveGState()
        context.clip(to: doorPanelPath.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((bevelShadow2.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let doorPanelOpaqueShadow = (bevelShadow2.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: bevelShadow2.shadowOffset, blur: bevelShadow2.shadowBlurRadius, color: doorPanelOpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        doorPanelOpaqueShadow.setFill()
        doorPanelPath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Door Top Panel Drawing
        let doorTopPanelPath = UIBezierPath(rect: CGRect(x: frontDoorGroup.minX + fastFloor(frontDoorGroup.width * 0.25000 + 0.5), y: frontDoorGroup.minY + fastFloor(frontDoorGroup.height * 0.09091 + 0.5), width: fastFloor(frontDoorGroup.width * 0.78571 + 0.5) - fastFloor(frontDoorGroup.width * 0.25000 + 0.5), height: fastFloor(frontDoorGroup.height * 0.45455 + 0.5) - fastFloor(frontDoorGroup.height * 0.09091 + 0.5)))
        context.saveGState()
        context.setShadow(offset: whiteBottom.shadowOffset, blur: whiteBottom.shadowBlurRadius, color: (whiteBottom.shadowColor as! UIColor).cgColor)
        SampleStyleKit.baseLightColor.setFill()
        doorTopPanelPath.fill()

        ////// Door Top Panel Inner Shadow
        context.saveGState()
        context.clip(to: doorTopPanelPath.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((darkInner.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let doorTopPanelOpaqueShadow = (darkInner.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: darkInner.shadowOffset, blur: darkInner.shadowBlurRadius, color: doorTopPanelOpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        doorTopPanelOpaqueShadow.setFill()
        doorTopPanelPath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()



        //// Door Bottom Panel Drawing
        let doorBottomPanelPath = UIBezierPath(rect: CGRect(x: frontDoorGroup.minX + fastFloor(frontDoorGroup.width * 0.25000 + 0.5), y: frontDoorGroup.minY + fastFloor(frontDoorGroup.height * 0.52273 + 0.5), width: fastFloor(frontDoorGroup.width * 0.78571 + 0.5) - fastFloor(frontDoorGroup.width * 0.25000 + 0.5), height: fastFloor(frontDoorGroup.height * 0.88636 + 0.5) - fastFloor(frontDoorGroup.height * 0.52273 + 0.5)))
        context.saveGState()
        context.setShadow(offset: whiteBottom.shadowOffset, blur: whiteBottom.shadowBlurRadius, color: (whiteBottom.shadowColor as! UIColor).cgColor)
        SampleStyleKit.baseLightColor.setFill()
        doorBottomPanelPath.fill()

        ////// Door Bottom Panel Inner Shadow
        context.saveGState()
        context.clip(to: doorBottomPanelPath.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((darkInner.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let doorBottomPanelOpaqueShadow = (darkInner.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: darkInner.shadowOffset, blur: darkInner.shadowBlurRadius, color: doorBottomPanelOpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        doorBottomPanelOpaqueShadow.setFill()
        doorBottomPanelPath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()



        //// Door Knob Drawing
        let doorKnobPath = UIBezierPath(ovalIn: CGRect(x: frontDoorGroup.minX + fastFloor(frontDoorGroup.width * 0.10714 + 0.5), y: frontDoorGroup.minY + fastFloor(frontDoorGroup.height * 0.45455 + 0.5), width: fastFloor(frontDoorGroup.width * 0.21429 + 0.5) - fastFloor(frontDoorGroup.width * 0.10714 + 0.5), height: fastFloor(frontDoorGroup.height * 0.52273 + 0.5) - fastFloor(frontDoorGroup.height * 0.45455 + 0.5)))
        context.saveGState()
        context.setShadow(offset: bottomThinShadow.shadowOffset, blur: bottomThinShadow.shadowBlurRadius, color: (bottomThinShadow.shadowColor as! UIColor).cgColor)
        UIColor.white.setFill()
        doorKnobPath.fill()

        ////// Door Knob Inner Shadow
        context.saveGState()
        context.clip(to: doorKnobPath.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((bevelShadow2.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let doorKnobOpaqueShadow = (bevelShadow2.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: bevelShadow2.shadowOffset, blur: bevelShadow2.shadowBlurRadius, color: doorKnobOpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        doorKnobOpaqueShadow.setFill()
        doorKnobPath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()



        context.endTransparencyLayer()
        context.restoreGState()
    }

    public dynamic class func drawButton(frame: CGRect = CGRect(x: 18, y: 42, width: 91, height: 45)) {
        //// General Declarations
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: frame.minX + fastFloor(frame.width * 0.00000 + 0.5), y: frame.minY + fastFloor(frame.height * 0.00000 + 0.5), width: fastFloor(frame.width * 1.00000 + 0.5) - fastFloor(frame.width * 0.00000 + 0.5), height: fastFloor(frame.height * 1.00000 + 0.5) - fastFloor(frame.height * 0.00000 + 0.5)), cornerRadius: 6)
        SampleStyleKit.buttonColor.setFill()
        rectanglePath.fill()
    }

    public dynamic class func drawButtonHighlighted(frame: CGRect = CGRect(x: 18, y: 42, width: 91, height: 45)) {
        //// General Declarations
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: frame.minX + fastFloor(frame.width * 0.00000 + 0.5), y: frame.minY + fastFloor(frame.height * 0.00000 + 0.5), width: fastFloor(frame.width * 1.00000 + 0.5) - fastFloor(frame.width * 0.00000 + 0.5), height: fastFloor(frame.height * 1.00000 + 0.5) - fastFloor(frame.height * 0.00000 + 0.5)), cornerRadius: 6)
        SampleStyleKit.buttonHighlightedColor.setFill()
        rectanglePath.fill()
    }

    public dynamic class func drawIconPacMan(frame: CGRect = CGRect(x: 18, y: 14, width: 32, height: 32), tintColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Oval Drawing
        let ovalRect = CGRect(x: frame.minX + fastFloor(frame.width * 0.00000 + 0.5), y: frame.minY + fastFloor(frame.height * 0.00000 + 0.5), width: fastFloor(frame.width * 1.00000 + 0.5) - fastFloor(frame.width * 0.00000 + 0.5), height: fastFloor(frame.height * 1.00000 + 0.5) - fastFloor(frame.height * 0.00000 + 0.5))
        let ovalPath = UIBezierPath()
        ovalPath.addArc(withCenter: CGPoint(x: ovalRect.midX, y: ovalRect.midY), radius: ovalRect.width / 2, startAngle: 24 * CGFloat.pi/180, endAngle: -24 * CGFloat.pi/180, clockwise: true)
        ovalPath.addLine(to: CGPoint(x: ovalRect.midX, y: ovalRect.midY))
        ovalPath.close()

        tintColor.setFill()
        ovalPath.fill()
    }

    public dynamic class func drawIconGhost(frame: CGRect = CGRect(x: 18, y: 16, width: 32, height: 32), tintColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: frame.minX + 0.78125 * frame.width, y: frame.minY + 0.25000 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.62500 * frame.width, y: frame.minY + 0.25000 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.62500 * frame.width, y: frame.minY + 0.40625 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.78125 * frame.width, y: frame.minY + 0.40625 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.78125 * frame.width, y: frame.minY + 0.25000 * frame.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: frame.minX + 0.40625 * frame.width, y: frame.minY + 0.25000 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.25000 * frame.width, y: frame.minY + 0.25000 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.25000 * frame.width, y: frame.minY + 0.40625 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.40625 * frame.width, y: frame.minY + 0.40625 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.40625 * frame.width, y: frame.minY + 0.25000 * frame.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: frame.minX + 0.83282 * frame.width, y: frame.minY + 0.01023 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.83883 * frame.width, y: frame.minY + 0.01170 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.92580 * frame.width, y: frame.minY + 0.09867 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.87925 * frame.width, y: frame.minY + 0.02642 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.91108 * frame.width, y: frame.minY + 0.05825 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.93750 * frame.width, y: frame.minY + 0.23885 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.93750 * frame.width, y: frame.minY + 0.13569 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.93750 * frame.width, y: frame.minY + 0.17008 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.93750 * frame.width, y: frame.minY + 1.00000 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.84375 * frame.width, y: frame.minY + 1.00000 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.84375 * frame.width, y: frame.minY + 0.87500 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.71875 * frame.width, y: frame.minY + 0.87500 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.71875 * frame.width, y: frame.minY + 1.00000 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.59375 * frame.width, y: frame.minY + 1.00000 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.59375 * frame.width, y: frame.minY + 0.87500 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.46875 * frame.width, y: frame.minY + 0.87500 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.46875 * frame.width, y: frame.minY + 1.00000 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.34375 * frame.width, y: frame.minY + 1.00000 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.34375 * frame.width, y: frame.minY + 0.87500 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.21875 * frame.width, y: frame.minY + 0.87500 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.21875 * frame.width, y: frame.minY + 1.00000 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.09375 * frame.width, y: frame.minY + 1.00000 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.09375 * frame.width, y: frame.minY + 0.23885 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.10150 * frame.width, y: frame.minY + 0.11302 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.09375 * frame.width, y: frame.minY + 0.17617 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.09375 * frame.width, y: frame.minY + 0.14205 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.10398 * frame.width, y: frame.minY + 0.10468 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.10225 * frame.width, y: frame.minY + 0.11020 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.10308 * frame.width, y: frame.minY + 0.10742 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.10545 * frame.width, y: frame.minY + 0.09867 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.19242 * frame.width, y: frame.minY + 0.01170 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.12017 * frame.width, y: frame.minY + 0.05825 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.15200 * frame.width, y: frame.minY + 0.02642 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.33260 * frame.width, y: frame.minY + 0.00000 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.22944 * frame.width, y: frame.minY + 0.00000 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.26383 * frame.width, y: frame.minY + 0.00000 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.69865 * frame.width, y: frame.minY + 0.00000 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.83282 * frame.width, y: frame.minY + 0.01023 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.76742 * frame.width, y: frame.minY + 0.00000 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.80181 * frame.width, y: frame.minY + 0.00000 * frame.height))
        bezierPath.close()
        tintColor.setFill()
        bezierPath.fill()
    }

    public dynamic class func drawScaleCircle(frame: CGRect = CGRect(x: 20, y: 17, width: 96, height: 96), animation: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Oval Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 0.50000 * frame.width, y: frame.minY + 0.50000 * frame.height)
        context.scaleBy(x: animation, y: animation)

        let ovalPath = UIBezierPath(ovalIn: CGRect(x: -48, y: -48, width: 96, height: 96))
        UIColor.green.setFill()
        ovalPath.fill()

        context.restoreGState()
    }

}



extension UIColor {
    func withHue(_ newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func withSaturation(_ newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func withBrightness(_ newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func withAlpha(_ newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, brightness: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func highlight(withLevel highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func shadow(withLevel shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}



extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}
